<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LIYI&#39;S BLOG</title>
  
  <subtitle>liyi的个人博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-21T07:06:20.956Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LIYI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SJTU_OJ</title>
    <link href="http://example.com/posts/96da010c.html"/>
    <id>http://example.com/posts/96da010c.html</id>
    <published>2023-04-16T20:55:29.000Z</published>
    <updated>2023-04-21T07:06:20.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SJTU-OJ-1387-Huffman-Tree"><a href="#SJTU-OJ-1387-Huffman-Tree" class="headerlink" title="SJTU OJ-1387. Huffman Tree"></a><center>SJTU OJ-1387. Huffman Tree</h1><ul><li><p>这道题就是用huffman算法，先创建一个数组储存，我是用parent不断地向上查找找到len的值，我看到别人用的贪心什么的还没学到。</p></li><li><p><em>需要注意的题目给的数据范围，比较狗。</em></p></li><li><p>下面是我的代码部分</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> weight=<span class="number">0</span>;</span><br><span class="line">    Node *parent =<span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">(Node hfm[], <span class="type">int</span> k, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, min, minWeight = <span class="number">1000000000</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = k+<span class="number">1</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((!hfm[i].parent) &amp;&amp; (hfm[i].weight &lt; minWeight))</span><br><span class="line">        &#123;</span><br><span class="line">            min = i; </span><br><span class="line">            minWeight = hfm[min].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node* hfm;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n ==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hfm = <span class="keyword">new</span> Node[<span class="number">2</span> * n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; hfm[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i!= <span class="number">2</span> * n) &#123;</span><br><span class="line">        <span class="type">int</span> min1 = <span class="built_in">min</span>(hfm, <span class="number">0</span>, i);</span><br><span class="line">        hfm[min1].parent = &amp;hfm[i];</span><br><span class="line">        <span class="type">int</span> min2 = <span class="built_in">min</span>(hfm, <span class="number">0</span>, i);</span><br><span class="line">        hfm[min2].parent = &amp;hfm[i];</span><br><span class="line">        hfm[i].weight = hfm[min1].weight + hfm[min2].weight;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        Node *p = &amp;hfm[i];</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;parent) &#123;</span><br><span class="line">            p = p-&gt;parent;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        count += hfm[i].weight * len;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; count;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="SJTU-OJ-1043-完全二叉树"><a href="#SJTU-OJ-1043-完全二叉树" class="headerlink" title="SJTU OJ-1043. 完全二叉树"></a><center>SJTU OJ-1043. 完全二叉树</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h2><ul><li>给出一棵二叉树，判断其是否为完全二叉树。<h2 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format:"></a>Input Format:</h2></li><li><p>第一行，N&lt;1000000，表示二叉树节点数。默认序号为0的节点为树根。接下来共N-1行，依次表示序号为1，…，N-1的节点的父亲节点序号。</p></li><li><p>如果一个节点有两个孩子节点，左孩子节点序号总是小于右孩子节点序号。</p><h2 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format:"></a>Output Format:</h2></li><li>输出“true”or“false”<h2 id="Analysis："><a href="#Analysis：" class="headerlink" title="Analysis："></a>Analysis：</h2></li><li>画出不是完全二叉树的情况，将其逐个排除掉，即可得到只剩下完全二叉树的情况。</li><li>先对节点的子节点来分析，一共有3种异常情况：<br>1、只有左孩子<br>2、只有右孩子<br>3、既没有左孩子也没有右孩子</li><li>先挑最简单的情况，只有右孩子的情况，此时该树一定不是完全二叉树（如果有疑惑，建议看看完全二叉树的定义）</li><li>当只有左孩子或者没有孩子的情况下，通过层次遍历则后面一定所有节点都是无孩子的情况（因为完全二叉树要求n-1层是满的）。  <blockquote><p>这里我是直接把我之前写的seqQueue类给复制过来了，其实只要自己照着题目条件稍微搞个数组模拟以下队列就行了</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">seqQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* arr;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> Front, Rear;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doubleSpace</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">seqQueue</span>(<span class="type">int</span> size = <span class="number">100</span>);</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">T <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">enQueue</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deQueue</span><span class="params">()</span></span>;</span><br><span class="line">~<span class="built_in">seqQueue</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span>[]arr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">seqQueue&lt;T&gt;::<span class="built_in">seqQueue</span>(<span class="type">int</span> size) &#123;</span><br><span class="line">arr = <span class="keyword">new</span> T[size];</span><br><span class="line">maxsize = size;</span><br><span class="line">Front = Rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">bool</span> seqQueue&lt;T&gt;::<span class="built_in">isEmpty</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> Front == Rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">bool</span> seqQueue&lt;T&gt;::<span class="built_in">isFull</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> (Rear + <span class="number">1</span>) % maxsize == Front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T seqQueue&lt;T&gt;::<span class="built_in">front</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isEmpty</span>())</span><br><span class="line"><span class="keyword">return</span> arr[Front];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> seqQueue&lt;T&gt;::<span class="built_in">deQueue</span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isEmpty</span>())</span><br><span class="line">Front = (Front + <span class="number">1</span>) % maxsize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> seqQueue&lt;T&gt;::<span class="built_in">enQueue</span>(<span class="type">const</span> T&amp; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isFull</span>())<span class="built_in">doubleSpace</span>();</span><br><span class="line">arr[Rear] = x;</span><br><span class="line">Rear = (Rear + <span class="number">1</span>) % maxsize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> seqQueue&lt;T&gt;::<span class="built_in">doubleSpace</span>() &#123;</span><br><span class="line">T* temp = <span class="keyword">new</span> T[maxsize * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = Front, j = <span class="number">0</span>; i != Rear; i = (i + <span class="number">1</span>) % maxsize, j++)</span><br><span class="line">&#123;</span><br><span class="line">temp[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]arr;</span><br><span class="line">arr = temp;</span><br><span class="line">Front = <span class="number">0</span>;</span><br><span class="line">Rear = maxsize - <span class="number">1</span>;</span><br><span class="line">maxsize = <span class="number">2</span> * maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Node* left, * right;</span><br><span class="line"><span class="built_in">Node</span>(Node* left = <span class="literal">NULL</span>, Node* right = <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;left = left;</span><br><span class="line"><span class="keyword">this</span>-&gt;right = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isCompleteTree</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">seqQueue&lt;Node*&gt;que;</span><br><span class="line">que.<span class="built_in">enQueue</span>(root);</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">Node* p = que.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left || p-&gt;right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left &amp;&amp; !p-&gt;right || !p-&gt;left &amp;&amp; !p-&gt;right)flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!p-&gt;left &amp;&amp; p-&gt;right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">que.<span class="built_in">deQueue</span>();</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left)que.<span class="built_in">enQueue</span>(p-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right)que.<span class="built_in">enQueue</span>(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node* root;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">root = <span class="keyword">new</span> Node[n]();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (!root[x].left) &#123; root[x].left = &amp;root[i]; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; root[x].right = &amp;root[i]; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isCompleteTree</span>(root))cout &lt;&lt; <span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span>[]root;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SJTU-OJ-1387-Huffman-Tree&quot;&gt;&lt;a href=&quot;#SJTU-OJ-1387-Huffman-Tree&quot; class=&quot;headerlink&quot; title=&quot;SJTU OJ-1387. Huffman Tree&quot;&gt;&lt;/a&gt;&lt;center&gt;SJ</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的大一</title>
    <link href="http://example.com/posts/dfa590a7.html"/>
    <id>http://example.com/posts/dfa590a7.html</id>
    <published>2023-04-16T20:55:29.000Z</published>
    <updated>2023-04-21T07:06:20.956Z</updated>
    
    
    <summary type="html">用于记录我的宝贵的大学生活，这是我的在大学的第一年的一些随笔和感想，纪念我逝去的青春</summary>
    
    
    
    
  </entry>
  
</feed>
